import random
import requests
from itertools import combinations
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
from telegram.error import BadRequest

# –í–∞—à–∏ API –∫–ª—é—á–∏
TELEGRAM_API_KEY = " "
KINOPOISK_API_KEY = " "

# –°–ª–æ–≤–∞—Ä—å –∂–∞–Ω—Ä–æ–≤
GENRES = {
    "üòÇ–ö–æ–º–µ–¥–∏—è": 13,
    "üëª–£–∂–∞—Å—ã": 17,
    "üê≠–ú—É–ª—å—Ç—Ñ–∏–ª—å–º": 18,
    "üöÄ–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞": 6,
    "üò¢–î—Ä–∞–º–∞": 2,
    "üí•–ë–æ–µ–≤–∏–∫": 3,
    "üó∫Ô∏è–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è": 5,
    "üë®‚Äçüë©‚Äçüëß‚Äçüë¶–°–µ–º–µ–π–Ω—ã–π": 19,
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∂–∞–Ω—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_genres = {}
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
shown_movies = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_genres[user_id] = []
    shown_movies[user_id] = set()

    keyboard = [
        [InlineKeyboardButton("üé≠ –í—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä—ã –≤—Å–µ–π —Å–µ–º—å—ë–π", callback_data="choose_genres")],
        [InlineKeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∏–ª—å–º", callback_data="random_movie")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"

    # –£–ø—Ä–æ—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à—ë–ª –≤—ã–∑–æ–≤
    if update.callback_query:
        query = update.callback_query
        await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
        try:
            await query.edit_message_text(text, reply_markup=reply_markup)
        except BadRequest:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await query.message.reply_text(text, reply_markup=reply_markup)
    elif update.message:
        await update.message.reply_text(text, reply_markup=reply_markup)


async def choose_genres(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    buttons = [
        [InlineKeyboardButton(f"{genre} {'‚úÖ' if GENRES[genre] in user_genres.get(query.from_user.id, []) else ''}",
                              callback_data=f"add_genre_{GENRES[genre]}")]
        for genre in GENRES
    ]
    buttons.append([InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="finish_selection")])
    reply_markup = InlineKeyboardMarkup(buttons)

    try:
        await query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç:",
            reply_markup=reply_markup
        )
    except BadRequest:
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç:",
            reply_markup=reply_markup
        )


async def add_genre(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    genre_id = int(query.data.split("_")[-1])
    if user_id not in user_genres:
        user_genres[user_id] = []

    if genre_id in user_genres[user_id]:
        user_genres[user_id].remove(genre_id)
    else:
        user_genres[user_id].append(genre_id)

    selected_genres = [genre for genre, gid in GENRES.items() if gid in user_genres[user_id]]
    selected_genres_text = ", ".join(selected_genres) if selected_genres else "–ñ–∞–Ω—Ä—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã"

    await query.answer(f"–¢–µ–∫—É—â–∏–µ –∂–∞–Ω—Ä—ã: {selected_genres_text}")
    await choose_genres(update, context)


def call_kinopoisk_api(genre_ids, page=1):
    """–í—ã–∑–æ–≤ API –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞."""
    url = "https://kinopoiskapiunofficial.tech/api/v2.2/films"
    headers = {"X-API-KEY": KINOPOISK_API_KEY}
    params = {
        "genres": ','.join(map(str, genre_ids)) if genre_ids else '',
        "order": "RATING",
        "type": "ALL",
        "ratingFrom": 7,
        "ratingTo": 10,
        "page": page
    }

    response = requests.get(url, headers=headers, params=params)

    if response.status_code == 200:
        data = response.json()
        return data.get('items', [])
    else:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API: {response.status_code}")
        return []


def get_movie_details(movie_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ."""
    url = f"https://kinopoiskapiunofficial.tech/api/v2.2/films/{movie_id}"
    headers = {"X-API-KEY": KINOPOISK_API_KEY}

    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        return response.json()
    return None


def search_movies(genres):
    all_movies = []

    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º—ã —Å —Ç–µ–∫—É—â–µ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–µ–π –∂–∞–Ω—Ä–æ–≤
    movies = call_kinopoisk_api(genres)
    if movies:
        all_movies.extend(movies)

    # –ï—Å–ª–∏ —Ñ–∏–ª—å–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º —É–º–µ–Ω—å—à–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–Ω—Ä–æ–≤
    if not all_movies and len(genres) > 1:
        for r in range(len(genres) - 1, 0, -1):
            for genre_combo in combinations(genres, r):
                movies = call_kinopoisk_api(list(genre_combo))
                if movies:
                    all_movies.extend(movies)
                    break
            if all_movies:
                break

    return all_movies


async def show_movie(update: Update, context: ContextTypes.DEFAULT_TYPE, movies, user_id, is_random):
    if not movies:
        try:
            await update.callback_query.message.reply_text(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ñ–∏–ª—å–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∂–∞–Ω—Ä—ã –∏–ª–∏ —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø–æ–∏—Å–∫.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="start")
                ]])
            )
        except:
            await update.message.reply_text(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ñ–∏–ª—å–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∂–∞–Ω—Ä—ã –∏–ª–∏ —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø–æ–∏—Å–∫.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="start")
                ]])
            )
        return

    if user_id not in shown_movies:
        shown_movies[user_id] = set()

    unseen_movies = [m for m in movies if m.get('kinopoiskId') not in shown_movies[user_id]]
    if not unseen_movies:
        shown_movies[user_id].clear()
        unseen_movies = movies

    movie = random.choice(unseen_movies)
    movie_id = movie.get('kinopoiskId')
    shown_movies[user_id].add(movie_id)

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ
    movie_details = get_movie_details(movie_id)

    if movie_details:
        rating = movie_details.get('ratingKinopoisk', '–ù–µ —É–∫–∞–∑–∞–Ω')
        duration = movie_details.get('filmLength', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        description = movie_details.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç') or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
    else:
        rating = movie.get('rating', '–ù–µ —É–∫–∞–∑–∞–Ω')
        duration = movie.get('filmLength', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        description = '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏
    if len(description) > 800:
        description = description[:800] + "..."

    genre_ids = movie.get('genres', [])
    movie_genres = ", ".join([g.get('genre', '–ù–µ —É–∫–∞–∑–∞–Ω') for g in genre_ids])
    year = movie.get('year', '–ù–µ —É–∫–∞–∑–∞–Ω')

    keyboard = [
        [InlineKeyboardButton("üé≤ –î—Ä—É–≥–æ–π —Ñ–∏–ª—å–º",
                              callback_data="next_random_movie" if is_random else "next_selected_movie")],
        [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    caption = (
        f"üé¨ *–ù–∞–∑–≤–∞–Ω–∏–µ*: {movie.get('nameRu', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìÖ *–ì–æ–¥*: {year}\n"
        f"‚≠ê *–†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ü–æ–∏—Å–∫*: {rating}\n"
        f"‚è± *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å*: {duration} –º–∏–Ω\n"
        f"üé≠ *–ñ–∞–Ω—Ä—ã*: {movie_genres}\n\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ*: {description}\n\n"
        f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∏–ª—å–º](https://www.kinopoisk.ru/film/{movie_id})"
    )

    try:
        if update.callback_query:
            await update.callback_query.message.reply_photo(
                photo=movie.get('posterUrlPreview', ''),
                caption=caption,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_photo(
                photo=movie.get('posterUrlPreview', ''),
                caption=caption,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
    except Exception as e:
        print(f"Error sending movie info: {e}")
        try:
            if update.callback_query:
                await update.callback_query.message.reply_text(
                    text=caption,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
            else:
                await update.message.reply_text(
                    text=caption,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


async def next_movie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å

    try:
        if query.data == "next_random_movie":
            movies = call_kinopoisk_api([])
            await show_movie(update, context, movies, user_id, is_random=True)
        else:  # next_selected_movie
            selected_genres = user_genres.get(user_id, [])
            movies = search_movies(selected_genres)
            await show_movie(update, context, movies, user_id, is_random=False)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ next_movie: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∏–ª—å–º
        if query.data == "next_random_movie":
            movies = call_kinopoisk_api([])
            await show_movie(update, context, movies, user_id, is_random=True)
        else:
            selected_genres = user_genres.get(user_id, [])
            movies = search_movies(selected_genres)
            await show_movie(update, context, movies, user_id, is_random=False)


async def finish_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    if user_id not in user_genres or not user_genres[user_id]:
        await query.answer("–í—ã –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞!", show_alert=True)
        return

    selected_genres = user_genres[user_id]
    movies = search_movies(selected_genres)

    if not movies:
        await query.edit_message_text(
            "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∂–∞–Ω—Ä–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –∂–∞–Ω—Ä—ã.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –∂–∞–Ω—Ä—ã", callback_data="choose_genres"),
                InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="start")
            ]])
        )
        return

    await show_movie(update, context, movies, user_id, is_random=False)


async def random_movie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    movies = call_kinopoisk_api([])  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    await show_movie(update, context, movies, user_id, is_random=True)


# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
application = Application.builder().token(TELEGRAM_API_KEY).build()
application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(choose_genres, pattern="^choose_genres$"))
application.add_handler(CallbackQueryHandler(add_genre, pattern="^add_genre_"))
application.add_handler(CallbackQueryHandler(finish_selection, pattern="^finish_selection$"))
application.add_handler(CallbackQueryHandler(random_movie, pattern="^random_movie$"))
application.add_handler(CallbackQueryHandler(next_movie, pattern="^next_random_movie$"))
application.add_handler(CallbackQueryHandler(next_movie, pattern="^next_selected_movie$"))
application.add_handler(CallbackQueryHandler(start, pattern="^start$"))

if __name__ == "__main__":
    application.run_polling()

